{"mappings":";;;;;;;;;;;;;;;AAAA;;;AEAO,SAAS,yCAAc,GAAG;IAC/B,OACE,cAAc,IAAI,MAAM,IACxB,SAAS,CAAC,cAAc,GAAG,CAAC,IAC5B,SAAS,CAAC,gBAAgB,GAAG,CAAC,CAC9B;CACH;;ADND;AEAO,SAAS,yCAAiB,CAAC,EAAE,EAAE;IACpC,MAAM,KAAK,GAAG,CAAC,AAAC;IAChB,MAAM,GAAG,GAAG,CAAC,AAAC;IAEd,IAAI,CAAC,EAAE,EACL,OAAO;eAAE,KAAK;aAAE,GAAG;KAAE,CAAC;IAGxB,IACE,OAAO,EAAE,CAAC,cAAc,KAAK,QAAQ,IACrC,OAAO,EAAE,CAAC,YAAY,KAAK,QAAQ,EAEnC,OAAO;QAAE,KAAK,EAAE,EAAE,CAAC,cAAc;QAAE,GAAG,EAAE,EAAE,CAAC,YAAY;KAAE,CAAC;IAG5D,OAAO;eAAE,KAAK;aAAE,GAAG;KAAE,CAAC;CACvB;AAEM,SAAS,yCAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC/C,IAAI,IAAI;QACN,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC5C,MACC,IAAI,CAAC,KAAK,EAAE,CAAC;KAEhB;CACF;;;;;;;;;;AC3BD,IAAA,yCAA0C;AAC1C,IAAA,yCAAkE;AADlE,yCAAwB,GAAG,CAAC,aAAa,CAAC,CAAC;AAC3C,yCAAoC,GAAG,CAAC,yBAAyB,CAAC,CAAC;;;ACD5D,MAAM,yCAAW,GAAG;IACzB,UAAU,EAAE,OAAO;IACnB,SAAS,EAAE,OAAO;IAClB,OAAO,EAAE,KAAK;IACd,SAAS,EAAE,GAAG;CACf,AAAC;;;ACGK,MAAM,yCAA2B,GAAG,OACzC,IAAY,EACZ,OAAe,EACf,MAAe,EACf,MAAe,GACmB;IAClC,MAAM,EAdR,YAcU,UAAU,CAAA,EAdpB,iCAcsB,+BAA+B,CAAA,EAdrD,MAcuD,IAAI,CAAA,EAAE,GAAG,MAAM,IAAI;QACtE,UAAU,EAAE,CAAC;QACb,+BAA+B,EAAE,IAAI;QACrC,IAAI,EAAE,IAAI;KACX,AAAC;IACF,4BAA4B;IAC5B,mJAAmJ;IAEnJ,IAAI,SAAS,GAAG,IAAI,OAAO,EAAE,AAAC;IAE9B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9B,SAAS,EAAG,CAAC,EAAE,OAAO,CAAC,CAAC;QACxB,OAAO,EAAG;YACR;gBACE,QAAQ,EAAG,CAAC,EAAE,IAAI,CAAC,CAAC;aACrB;SACF;KACF,CAAC;IAEF,SAAS,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAErD,MAAM,cAAc,GAAG;QACrB,MAAM,EAAE,KAAK;KAGd,AAAC;IAEF,IAAI;QACF,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAC,cAAc,CAAC,AAAC;QAC1D,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,AAAC;QAC9B,qCAAqC;QACrC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,MAAM,KAAK,GAAG,+BAA+B,GACzC;mBAAI,IAAI,CAAC,MAAM;gBAAE,IAAI;aAAC,GACvB,IAAI,CAAC,MAAM,AAAC;YACf,OAAO,KAAK,CAAC;SACd,MAAM;YACL,IAAI,+BAA+B,EACjC,OAAO;gBAAC,IAAI;aAAC,CAAC;YAEhB,OAAO,EAAE,CAAC;SACX;KACF,CAAC,OAAO,CAAC,EAAE;QACV,cAAc;QACd,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,CAAC,CAAC,CAAC;QAC5D,OAAO,EAAE,CAAC;KACX;CACF,AAAC;;;ANnDF,MAAM,4BAAM,GAAG,SAAS,AAAC;AACzB,MAAM,8BAAQ,GAAG,WAAW,AAAC;AAC7B,MAAM,gCAAU,GAAG,QAAQ,AAAC;AAE5B,MAAM,0CAAoB,GAAG,EAAE,AAAC;AAChC,MAAM,2CAAqB,GAAG,GAAG,AAAC;AAE3B,MAAM,yCAAkB,GAAG,CAAC,mBACjC,eAAe,GAAG,CAAC,KAAK,iBAAK,2BAAC,OAAK;QAAE,GAAG,KAAK;MAAI;AAAA,SACjD,IAAI,GAAG,IAAI,YACX,OAAO,GAAG,CAAC,YACX,OAAO,GAAG,EAAE,GArBd,UAsBE,QAAQ,CAAA,EAtBV,cAuBE,YAAY,CAAA,EAvBd,QAwBE,MAAM,CAAA,EAxBR,OAyBE,MAAK,CAAA,EAzBP,WA0BE,SAAS,CAAA,sBACT,kBAAkB,GAAG,EAAE,oBACvB,eAAe,GAAG,EAAE,qBACpB,gBAAgB,GAAG,EAAE,eACrB,UAAU,GAAG,CAAC,qCACd,gCAAgC,GAAG,KAAK,gCACxC,2BAA2B,GAAG,GAAG,gBACjC,WAAW,GAAG;IACZ,yCAAW,CAAC,SAAS;IACrB,yCAAW,CAAC,SAAS;IACrB,yCAAW,CAAC,UAAU;IACtB,yCAAW,CAAC,OAAO;CACpB,iCACD,4BAA4B,GAAG,IAAI,oCACnC,+BAA+B,GAAG,IAAI,YACtC,OAAO,GAAG,IAAI,YACd,OAAO,GAAG,EAAE,WACZ,MAAM,GAAG,EAAE,GACX,GAAG,IAAI,EACiB,GAAkB;IAC1C,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,qBAAQ,CAAW,EAAE,CAAC,AAAC;IACrD,MAAM,CAAC,KAAI,EAAE,OAAO,CAAC,GAAG,qBAAQ,CAAC,CAAC,CAAC,AAAC;IACpC,MAAM,CAAC,IAAG,EAAE,MAAM,CAAC,GAAG,qBAAQ,CAAC,CAAC,CAAC,AAAC;IAClC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,qBAAQ,CAAS,CAAC,CAAC,AAAC;IACtD,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,qBAAQ,CAAC,EAAE,CAAC,AAAC;IACjD,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,qBAAQ,CAAC,EAAE,CAAC,AAAC;IAC7C,MAAM,QAAQ,GAAG,mBAAM,CAAmB,IAAI,CAAC,AAAC;IAChD,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,qBAAQ,CAAC;QAAE,KAAK,EAAE,CAAC;QAAE,MAAM,EAAE,CAAC;KAAE,CAAC,AAAC;IAEtE,MAAM,uBAAuB,GAAG,oBAAO,CACrC,IACE,gCAAgC,GAC5B,UAAU,CAAC,KAAK,GAAG,2BAA2B,GAC9C,IAAI;IAAA,EACV;QAAC,UAAU;QAAE,2BAA2B;QAAE,gCAAgC;KAAC,CAC5E,AAAC;IAEF,MAAM,KAAK,GAAG,IAAM;QAClB,sBAAsB;QACtB,YAAY,CAAC,CAAC,CAAC,CAAC;QAChB,UAAU,CAAC,EAAE,CAAC,CAAC;KAChB,AAAC;IAEF,MAAM,eAAe,GAAG,CAAC,KAAa,GAAK;YA2BlC,GAAgB;QA1BvB,MAAM,aAAa,GAAG,MAAK,AAAC;QAC5B,oDAAoD;QACpD,oDAAoD;QACpD,MAAM,QAAQ,GACZ,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,GACtC,OAAO,CAAC,KAAK,CAAC,GACd,GAAG,GACH,aAAa,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,AAAC;QAE9D,iEAAiE;QACjE,+BAA+B;QAC/B,UAAU,CAAC,IAAM;YACf,yCAAgB,CACd,oEAAoE;YACpE,QAAQ,CAAC,OAAO,EAChB,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CACvC,CAAC;SACH,EAAE,CAAC,CAAC,CAAC;QAEN,0CAA0C;QAC1C,MAAM,CAAC,GAAG;YACR,MAAM,EAAE;gBAAE,KAAK,EAAE,QAAQ;aAAE;SAC5B,AAAgD,AAAC;QAClD,YAAY,CAAC,QAAQ,CAAC,CAAC;QACvB,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxB,KAAK,EAAE,CAAC;QACR,OAAO,CAAA,GAAgB,GAAhB,QAAQ,CAAC,OAAO,cAAhB,GAAgB,WAAO,GAAvB,KAAA,CAAuB,GAAvB,GAAgB,CAAE,KAAK,EAAE,CAAC;KAClC,AAAC;IAEF,MAAM,iBAAiB,GAAG,OAAO,QAAgB,GAAK;QACpD,IAAI,CAAC,uBAAuB,EAC1B,OAAO;QAET,4BAA4B;QAC5B,uJAAuJ;QAEvJ,MAAM,UAAU,GAAG,+BAA+B,GAC9C,UAAU,GAAG,CAAC,GACd,UAAU,AAAC;QAEf,MAAM,IAAI,GAAG,MAAM,yCAA2B,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE;wBACxE,UAAU;6CACV,+BAA+B;kBAC/B,IAAI;SACL,CAAC,AAAC;QACH,UAAU,CAAC,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;KAC9B,AAAC;IAEF,MAAM,YAAY,GAAG,CAAC,CAAoC,GAAK;QAC7D,MAAM,KAAK,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK,AAAC;QAEpC,0CAA0C;QAC1C,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxB,YAAY,CAAC,KAAK,CAAC,CAAC;QAEpB,IAAI,CAAC,uBAAuB,EAC1B,OAAO;QAGT,sCAAsC;QACtC,MAAM,KAAK,GAAG,yCAAiB,CAAC,CAAC,CAAC,MAAM,CAAqB,CAAC,GAAG,AAAC;QAClE,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,AAAC;QAE/B,IAAI,CAAC,KAAK,EAAE,OAAO;QAEnB,MAAM,QAAQ,GAAG,8CAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,AAAC;QAEnD,4DAA4D;QAC5D,aAAa;QACb,MAAM,gBAAgB,GACpB,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,GAClE,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,GAClC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC,CAAC,AAAC;QAExC,uDAAuD;QACvD,0CAA0C;QAC1C,6DAA6D;QAC7D,eAAe;QACf,aAAa,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC;QACpC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAEvB,8CAA8C;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,gBAAgB,GAAG,CAAC,EAAE,KAAK,CAAC,AAAC;QAC7D,IAAI,WAAW,IAAI,OAAO,EAAE;YAC1B,wCAAwC;YACxC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAE/B,MAAM,IAAI,GAAG,KAAK,CAAC,qBAAqB,EAAE,AAAC;YAE3C,oDAAoD;YAEpD,0DAA0D;YAC1D,0BAA0B;YAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CACnB,QAAQ,CAAC,IAAI,EACb,IAAI,CAAC,KAAK,GAAG,2CAAqB,GAAG,CAAC,CACvC,AAAC;YAEF,0DAA0D;YAC1D,8BAA8B;YAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,0CAAoB,EAAE,IAAI,CAAC,MAAM,CAAC,AAAC;YAEvE,MAAM,CAAC,GAAG,CAAC,CAAC;YACZ,OAAO,CAAC,IAAI,CAAC,CAAC;SACf,MACC,KAAK,EAAE,CAAC;KAEX,AAAC;IAEF,MAAM,aAAa,GAAG,CAAC,KAA4C,GAAK;QACtE,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,AAAC;QAEzC,IAAI,aAAa;YACf,IAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACnC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,eAAe,CAAC,SAAS,CAAC,CAAC;aAC5B,MACC,OAAQ,KAAK,CAAC,GAAG;gBACf,KAAK,gCAAU;oBACb,KAAK,CAAC,cAAc,EAAE,CAAC;oBACvB,KAAK,EAAE,CAAC;oBACR,MAAM;gBACR,KAAK,4BAAM;oBACT,KAAK,CAAC,cAAc,EAAE,CAAC;oBACvB,YAAY,CAAC,AAAC,CAAA,OAAO,CAAC,MAAM,GAAG,SAAS,GAAG,CAAC,CAAA,GAAI,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChE,MAAM;gBACR,KAAK,8BAAQ;oBACX,KAAK,CAAC,cAAc,EAAE,CAAC;oBACvB,YAAY,CAAC,AAAC,CAAA,SAAS,GAAG,CAAC,CAAA,GAAI,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC/C,MAAM;gBACR;oBACE,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC;oBAC9B,MAAM;aACT;eAGH,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC;KAEjC,AAAC;IAEF,MAAM,UAAU,GAAG,CACjB,KAA+D,GAC5D;QACH,IAAI,CAAC,yCAAc,EAAE;YACnB,IAAI,4BAA4B,IAAI,OAAO,CAAC,SAAS,CAAC,EACpD,eAAe,CAAC,SAAS,CAAC,CAAC;iBAE3B,KAAK,EAAE,CAAC;SAEX;QACD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;KACzB,AAAC;IAEF,MAAM,YAAY,GAAG,IAAM;QACzB,+CAA+C;QAC/C,mCAAmC;QACnC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,AAAC;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,AAAC;QAClC,aAAa,CAAC;mBAAE,KAAK;oBAAE,MAAM;SAAE,CAAC,CAAC;KAClC,AAAC;IAEF,sBAAS,CAAC,IAAM;QACd,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,AAAC;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,AAAC;QAClC,aAAa,CAAC;mBAAE,KAAK;oBAAE,MAAM;SAAE,CAAC,CAAC;QAEjC,OAAO,IAAM;YACX,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SACpD,CAAC;KACH,EAAE,EAAE,CAAC,CAAC;IAEP,qBACE,4BAAC,KAAG;QACF,sDAAsD;QACtD,0BAA0B;QAC1B,KAAK,EAAE;YACL,GAAG,eAAe;YAClB,QAAQ,EAAE,UAAU;SACrB;QACD,SAAS,EAAE,kBAAkB;;YAE5B,eAAe,CAAC;gBACf,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE,aAAa;gBACxB,MAAM,EAAE,UAAU;gBAClB,GAAG,EAAE,QAAQ;gBACb,KAAK,EAAE,MAAK;gBACZ,aAAa,EAAE,oBAAoB;gBACnC,GAAG,IAAI;aACR,CAAC;YACD,uBAAuB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,kBAC5C,2BAAC,IAAE;gBACD,KAAK,EAAE;oBACL,IAAI,EAAE,CAAC,EAAE,KAAI,GAAG,OAAO,CAAC,EAAE,CAAC;oBAC3B,GAAG,EAAE,CAAC,EAAE,IAAG,GAAG,OAAO,CAAC,EAAE,CAAC;oBACzB,QAAQ,EAAE,UAAU;oBACpB,KAAK,EAAE,MAAM;iBACd;gBACD,SAAS,EAAE,gEAAO,CAAC,kBAAkB;gBACrC,aAAW,EAAC,qBAAqB;0BAMhC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,iBAC5C,2BAAC,IAAE;wBACD,SAAS,EAAE,KAAK,KAAK,SAAS,GAAG,gEAAO,CAAC,MAAM,GAAG,SAAS;wBAC3D,KAAK,EAAE,KAAK,KAAK,SAAS,GAAG,gBAAgB,IAAI,EAAE,GAAG,EAAE;wBACxD,YAAY,EAAE,IAAM;4BAClB,YAAY,CAAC,KAAK,CAAC,CAAC;yBACrB;wBACD,OAAO,EAAE,IAAM,eAAe,CAAC,KAAK,CAAC;wBAAA;kCAGpC,IAAI;uBAFA,IAAI,CAGN;gBACN,CAAC;cACC,AACN;;MACG,CACN;CACH,AAAC","sources":["src/index.tsx","src/util/index.ts","src/util/touch-util.ts","src/util/caret-util.js","src/styles.module.css","src/constants/TriggerKeys.ts","src/util/suggestions-util.ts"],"sourcesContent":["import * as React from \"react\";\r\nimport { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\r\nimport getCaretCoordinates from \"textarea-caret\";\r\nimport classes from \"./styles.module.css\";\r\nimport { ReactTransliterateProps } from \"./interfaces/Props\";\r\nimport { Language } from \"./types/Language\";\r\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\r\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\r\n\r\nconst KEY_UP = \"ArrowUp\";\r\nconst KEY_DOWN = \"ArrowDown\";\r\nconst KEY_ESCAPE = \"Escape\";\r\n\r\nconst OPTION_LIST_Y_OFFSET = 10;\r\nconst OPTION_LIST_MIN_WIDTH = 100;\r\n\r\nexport const ReactTransliterate = ({\r\n  renderComponent = (props) => <input {...props} />,\r\n  lang = \"hi\",\r\n  offsetX = 0,\r\n  offsetY = 10,\r\n  onChange,\r\n  onChangeText,\r\n  onBlur,\r\n  value,\r\n  onKeyDown,\r\n  containerClassName = \"\",\r\n  containerStyles = {},\r\n  activeItemStyles = {},\r\n  maxOptions = 5,\r\n  hideSuggestionBoxOnMobileDevices = false,\r\n  hideSuggestionBoxBreakpoint = 450,\r\n  triggerKeys = [\r\n    TriggerKeys.KEY_SPACE,\r\n    TriggerKeys.KEY_ENTER,\r\n    TriggerKeys.KEY_RETURN,\r\n    TriggerKeys.KEY_TAB,\r\n  ],\r\n  insertCurrentSelectionOnBlur = true,\r\n  showCurrentWordAsLastSuggestion = true,\r\n  enabled = true,\r\n  modelId = \"\",\r\n  apiURL = \"\",\r\n  ...rest\r\n}: ReactTransliterateProps): JSX.Element => {\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [left, setLeft] = useState(0);\r\n  const [top, setTop] = useState(0);\r\n  const [selection, setSelection] = useState<number>(0);\r\n  const [matchStart, setMatchStart] = useState(-1);\r\n  const [matchEnd, setMatchEnd] = useState(-1);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\r\n\r\n  const shouldRenderSuggestions = useMemo(\r\n    () =>\r\n      hideSuggestionBoxOnMobileDevices\r\n        ? windowSize.width > hideSuggestionBoxBreakpoint\r\n        : true,\r\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\r\n  );\r\n\r\n  const reset = () => {\r\n    // reset the component\r\n    setSelection(0);\r\n    setOptions([]);\r\n  };\r\n\r\n  const handleSelection = (index: number) => {\r\n    const currentString = value;\r\n    // create a new string with the currently typed word\r\n    // replaced with the word in transliterated language\r\n    const newValue =\r\n      currentString.substring(0, matchStart) +\r\n      options[index] +\r\n      \" \" +\r\n      currentString.substring(matchEnd + 1, currentString.length);\r\n\r\n    // set the position of the caret (cursor) one character after the\r\n    // the position of the new word\r\n    setTimeout(() => {\r\n      setCaretPosition(\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        inputRef.current!,\r\n        matchStart + options[index].length + 1,\r\n      );\r\n    }, 1);\r\n\r\n    // bubble up event to the parent component\r\n    const e = {\r\n      target: { value: newValue },\r\n    } as unknown as React.FormEvent<HTMLInputElement>;\r\n    onChangeText(newValue);\r\n    onChange && onChange(e);\r\n    reset();\r\n    return inputRef.current?.focus();\r\n  };\r\n\r\n  const renderSuggestions = async (lastWord: string) => {\r\n    if (!shouldRenderSuggestions) {\r\n      return;\r\n    }\r\n    // fetch suggestion from api\r\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\r\n\r\n    const numOptions = showCurrentWordAsLastSuggestion\r\n      ? maxOptions - 1\r\n      : maxOptions;\r\n\r\n    const data = await getTransliterateSuggestions(lastWord, modelId, apiURL, {\r\n      numOptions,\r\n      showCurrentWordAsLastSuggestion,\r\n      lang,\r\n    });\r\n    setOptions(data ? data : []);\r\n  };\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const value = e.currentTarget.value;\r\n\r\n    // bubble up event to the parent component\r\n    onChange && onChange(e);\r\n    onChangeText(value);\r\n\r\n    if (!shouldRenderSuggestions) {\r\n      return;\r\n    }\r\n\r\n    // get the current index of the cursor\r\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\r\n    const input = inputRef.current;\r\n\r\n    if (!input) return;\r\n\r\n    const caretPos = getCaretCoordinates(input, caret);\r\n\r\n    // search for the last occurence of the space character from\r\n    // the cursor\r\n    const indexOfLastSpace =\r\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\r\n        ? value.lastIndexOf(\"\\n\", caret - 1)\r\n        : value.lastIndexOf(\" \", caret - 1);\r\n\r\n    // first character of the currently being typed word is\r\n    // one character after the space character\r\n    // index of last character is one before the current position\r\n    // of the caret\r\n    setMatchStart(indexOfLastSpace + 1);\r\n    setMatchEnd(caret - 1);\r\n\r\n    // currentWord is the word that is being typed\r\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\r\n    if (currentWord && enabled) {\r\n      // make an api call to fetch suggestions\r\n      renderSuggestions(currentWord);\r\n\r\n      const rect = input.getBoundingClientRect();\r\n\r\n      // calculate new left and top of the suggestion list\r\n\r\n      // minimum of the caret position in the text input and the\r\n      // width of the text input\r\n      const left = Math.min(\r\n        caretPos.left,\r\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\r\n      );\r\n\r\n      // minimum of the caret position from the top of the input\r\n      // and the height of the input\r\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\r\n\r\n      setTop(top);\r\n      setLeft(left);\r\n    } else {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const helperVisible = options.length > 0;\r\n\r\n    if (helperVisible) {\r\n      if (triggerKeys.includes(event.key)) {\r\n        event.preventDefault();\r\n        handleSelection(selection);\r\n      } else {\r\n        switch (event.key) {\r\n          case KEY_ESCAPE:\r\n            event.preventDefault();\r\n            reset();\r\n            break;\r\n          case KEY_UP:\r\n            event.preventDefault();\r\n            setSelection((options.length + selection - 1) % options.length);\r\n            break;\r\n          case KEY_DOWN:\r\n            event.preventDefault();\r\n            setSelection((selection + 1) % options.length);\r\n            break;\r\n          default:\r\n            onKeyDown && onKeyDown(event);\r\n            break;\r\n        }\r\n      }\r\n    } else {\r\n      onKeyDown && onKeyDown(event);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (\r\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  ) => {\r\n    if (!isTouchEnabled()) {\r\n      if (insertCurrentSelectionOnBlur && options[selection]) {\r\n        handleSelection(selection);\r\n      } else {\r\n        reset();\r\n      }\r\n    }\r\n    onBlur && onBlur(event);\r\n  };\r\n\r\n  const handleResize = () => {\r\n    // TODO implement the resize function to resize\r\n    // the helper on screen size change\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    setWindowSize({ width, height });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    setWindowSize({ width, height });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      // position relative is required to show the component\r\n      // in the correct position\r\n      style={{\r\n        ...containerStyles,\r\n        position: \"relative\",\r\n      }}\r\n      className={containerClassName}\r\n    >\r\n      {renderComponent({\r\n        onChange: handleChange,\r\n        onKeyDown: handleKeyDown,\r\n        onBlur: handleBlur,\r\n        ref: inputRef,\r\n        value: value,\r\n        \"data-testid\": \"rt-input-component\",\r\n        ...rest,\r\n      })}\r\n      {shouldRenderSuggestions && options.length > 0 && (\r\n        <ul\r\n          style={{\r\n            left: `${left + offsetX}px`,\r\n            top: `${top + offsetY}px`,\r\n            position: \"absolute\",\r\n            width: \"auto\",\r\n          }}\r\n          className={classes.ReactTransliterate}\r\n          data-testid=\"rt-suggestions-list\"\r\n        >\r\n          {/*\r\n           * convert to set and back to prevent duplicate list items\r\n           * that might happen while using backspace\r\n           */}\r\n          {Array.from(new Set(options)).map((item, index) => (\r\n            <li\r\n              className={index === selection ? classes.Active : undefined}\r\n              style={index === selection ? activeItemStyles || {} : {}}\r\n              onMouseEnter={() => {\r\n                setSelection(index);\r\n              }}\r\n              onClick={() => handleSelection(index)}\r\n              key={item}\r\n            >\r\n              {item}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type { ReactTransliterateProps, Language };\r\nexport { TriggerKeys, getTransliterateSuggestions };\r\n","import { isTouchEnabled } from \"./touch-util\";\r\nimport { getInputSelection, setCaretPosition } from \"./caret-util\";\r\n\r\nexport { isTouchEnabled, getInputSelection, setCaretPosition };\r\n","export function isTouchEnabled() {\r\n  return (\r\n    \"ontouchstart\" in window ||\r\n    navigator.maxTouchPoints > 0 ||\r\n    navigator.msMaxTouchPoints > 0\r\n  );\r\n}\r\n","export function getInputSelection(el) {\r\n  const start = 0;\r\n  const end = 0;\r\n\r\n  if (!el) {\r\n    return { start, end };\r\n  }\r\n\r\n  if (\r\n    typeof el.selectionStart === \"number\" &&\r\n    typeof el.selectionEnd === \"number\"\r\n  ) {\r\n    return { start: el.selectionStart, end: el.selectionEnd };\r\n  }\r\n\r\n  return { start, end };\r\n}\r\n\r\nexport function setCaretPosition(elem, caretPos) {\r\n  if (elem) {\r\n    if (elem.selectionStart) {\r\n      elem.focus();\r\n      elem.setSelectionRange(caretPos, caretPos);\r\n    } else {\r\n      elem.focus();\r\n    }\r\n  }\r\n}\r\n",null,"export const TriggerKeys = {\r\n  KEY_RETURN: \"Enter\",\r\n  KEY_ENTER: \"Enter\",\r\n  KEY_TAB: \"Tab\",\r\n  KEY_SPACE: \" \",\r\n};\r\n","import { Language } from \"../types/Language\";\r\n\r\ntype Config = {\r\n  numOptions?: number;\r\n  showCurrentWordAsLastSuggestion?: boolean;\r\n  lang?: Language;\r\n};\r\n\r\nexport const getTransliterateSuggestions = async (\r\n  word: string,\r\n  modelId: string,\r\n  apiURL : string,\r\n  config?: Config,\r\n): Promise<string[] | undefined> => {\r\n  const { numOptions, showCurrentWordAsLastSuggestion, lang } = config || {\r\n    numOptions: 5,\r\n    showCurrentWordAsLastSuggestion: true,\r\n    lang: \"hi\",\r\n  };\r\n  // fetch suggestion from api\r\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\r\n  \r\n  var myHeaders = new Headers();\r\n\r\n  const postData = JSON.stringify({\r\n    \"modelId\" : `${modelId}`,\r\n    \"input\" : [\r\n      {\r\n        \"source\" : `${word}`\r\n      }\r\n    ]\r\n  })\r\n  \r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  const requestOptions = {\r\n    method: 'GET',\r\n    // headers: myHeaders,\r\n    // body: postData,\r\n  };\r\n\r\n  try {\r\n    const res = await fetch(apiURL+`/${word}`,requestOptions);\r\n    const data = await res.json();\r\n    // console.log(\"library data\", data);\r\n    if (data && data.result.length > 0) {\r\n      const found = showCurrentWordAsLastSuggestion\r\n        ? [...data.result, word]\r\n        :data.result;\r\n      return found;\r\n    } else {\r\n      if (showCurrentWordAsLastSuggestion) {\r\n        return [word];\r\n      }\r\n      return [];\r\n    }\r\n  } catch (e) {\r\n    // catch error\r\n    console.error(\"There was an error with transliteration\", e);\r\n    return [];\r\n  }\r\n};\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}