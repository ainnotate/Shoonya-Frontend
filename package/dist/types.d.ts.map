{"mappings":"AGAA,uBACI,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,UAAU,GACV,IAAI,GACJ,SAAS,GACT,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,GACJ,IAAI,CAAC;ACjCT,wCACE,SAAQ,KAAK,CAAC,SAAS,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;IAC/D;;;;OAIG;IACH,eAAe,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,MAAM,SAAS,CAAC;IAElD;;;OAGG;IACH,OAAO,CAAC,EAAE,MAAM,CAAC;IAEjB;;;OAGG;IACH,OAAO,CAAC,EAAE,MAAM,CAAC;IAEjB;;OAEG;IACH,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAE5B;;OAEG;IACH,eAAe,CAAC,EAAE,MAAM,aAAa,CAAC;IAEtC;;OAEG;IACH,gBAAgB,CAAC,EAAE,MAAM,aAAa,CAAC;IAEvC;;OAEG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;IAEpB;;OAEG;IACH,IAAI,CAAC,EAAE,QAAQ,CAAC;IAEhB;;OAEG;IACH,YAAY,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;IAErC;;OAEG;IACH,KAAK,EAAE,MAAM,CAAC;IAEd;;;;OAIG;IACH,gCAAgC,CAAC,EAAE,OAAO,CAAC;IAE3C;;;;OAIG;IACH,2BAA2B,CAAC,EAAE,MAAM,CAAC;IAErC;;OAEG;IACH,WAAW,CAAC,EAAE,MAAM,EAAE,CAAC;IAEvB;;;OAGG;IACH,4BAA4B,CAAC,EAAE,OAAO,CAAC;IAEvC;;;OAGG;IACH,+BAA+B,CAAC,EAAE,OAAO,CAAC;IAE1C;;;OAGG;IACH,OAAO,CAAC,EAAE,OAAO,CAAC;IAElB;;;OAGG;IACH,OAAO,CAAC,EAAE,MAAM,CAAC;IAEjB;;;KAGC;IACD,MAAM,CAAC,EAAE,MAAM,CAAC;CACjB;AC1GD,OAAO,MAAM;;;;;CAKZ,CAAC;ACHF,cAAc;IACZ,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,+BAA+B,CAAC,EAAE,OAAO,CAAC;IAC1C,IAAI,CAAC,EAAE,QAAQ,CAAC;CACjB,CAAC;AAEF,OAAO,MAAM,oCACL,MAAM,WACH,MAAM,UACN,MAAM,kCAEd,OAAO,CAAC,MAAM,EAAE,GAAG,SAAS,CA+C9B,CAAC;AC3CF,OAAO,MAAM,qWA4BV,uBAAuB,KAAG,IAAI,OAwPhC,CAAC","sources":["src/src/util/touch-util.ts","src/src/util/caret-util.js","src/src/util/index.ts","src/src/types/Language.ts","src/src/interfaces/Props.ts","src/src/constants/TriggerKeys.ts","src/src/util/suggestions-util.ts","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,null,null,null,null,"import * as React from \"react\";\r\nimport { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\r\nimport getCaretCoordinates from \"textarea-caret\";\r\nimport classes from \"./styles.module.css\";\r\nimport { ReactTransliterateProps } from \"./interfaces/Props\";\r\nimport { Language } from \"./types/Language\";\r\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\r\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\r\n\r\nconst KEY_UP = \"ArrowUp\";\r\nconst KEY_DOWN = \"ArrowDown\";\r\nconst KEY_ESCAPE = \"Escape\";\r\n\r\nconst OPTION_LIST_Y_OFFSET = 10;\r\nconst OPTION_LIST_MIN_WIDTH = 100;\r\n\r\nexport const ReactTransliterate = ({\r\n  renderComponent = (props) => <input {...props} />,\r\n  lang = \"hi\",\r\n  offsetX = 0,\r\n  offsetY = 10,\r\n  onChange,\r\n  onChangeText,\r\n  onBlur,\r\n  value,\r\n  onKeyDown,\r\n  containerClassName = \"\",\r\n  containerStyles = {},\r\n  activeItemStyles = {},\r\n  maxOptions = 5,\r\n  hideSuggestionBoxOnMobileDevices = false,\r\n  hideSuggestionBoxBreakpoint = 450,\r\n  triggerKeys = [\r\n    TriggerKeys.KEY_SPACE,\r\n    TriggerKeys.KEY_ENTER,\r\n    TriggerKeys.KEY_RETURN,\r\n    TriggerKeys.KEY_TAB,\r\n  ],\r\n  insertCurrentSelectionOnBlur = true,\r\n  showCurrentWordAsLastSuggestion = true,\r\n  enabled = true,\r\n  modelId = \"\",\r\n  apiURL = \"\",\r\n  ...rest\r\n}: ReactTransliterateProps): JSX.Element => {\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [left, setLeft] = useState(0);\r\n  const [top, setTop] = useState(0);\r\n  const [selection, setSelection] = useState<number>(0);\r\n  const [matchStart, setMatchStart] = useState(-1);\r\n  const [matchEnd, setMatchEnd] = useState(-1);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\r\n\r\n  const shouldRenderSuggestions = useMemo(\r\n    () =>\r\n      hideSuggestionBoxOnMobileDevices\r\n        ? windowSize.width > hideSuggestionBoxBreakpoint\r\n        : true,\r\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\r\n  );\r\n\r\n  const reset = () => {\r\n    // reset the component\r\n    setSelection(0);\r\n    setOptions([]);\r\n  };\r\n\r\n  const handleSelection = (index: number) => {\r\n    const currentString = value;\r\n    // create a new string with the currently typed word\r\n    // replaced with the word in transliterated language\r\n    const newValue =\r\n      currentString.substring(0, matchStart) +\r\n      options[index] +\r\n      \" \" +\r\n      currentString.substring(matchEnd + 1, currentString.length);\r\n\r\n    // set the position of the caret (cursor) one character after the\r\n    // the position of the new word\r\n    setTimeout(() => {\r\n      setCaretPosition(\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        inputRef.current!,\r\n        matchStart + options[index].length + 1,\r\n      );\r\n    }, 1);\r\n\r\n    // bubble up event to the parent component\r\n    const e = {\r\n      target: { value: newValue },\r\n    } as unknown as React.FormEvent<HTMLInputElement>;\r\n    onChangeText(newValue);\r\n    onChange && onChange(e);\r\n    reset();\r\n    return inputRef.current?.focus();\r\n  };\r\n\r\n  const renderSuggestions = async (lastWord: string) => {\r\n    if (!shouldRenderSuggestions) {\r\n      return;\r\n    }\r\n    // fetch suggestion from api\r\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\r\n\r\n    const numOptions = showCurrentWordAsLastSuggestion\r\n      ? maxOptions - 1\r\n      : maxOptions;\r\n\r\n    const data = await getTransliterateSuggestions(lastWord, modelId, apiURL, {\r\n      numOptions,\r\n      showCurrentWordAsLastSuggestion,\r\n      lang,\r\n    });\r\n    setOptions(data ? data : []);\r\n  };\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const value = e.currentTarget.value;\r\n\r\n    // bubble up event to the parent component\r\n    onChange && onChange(e);\r\n    onChangeText(value);\r\n\r\n    if (!shouldRenderSuggestions) {\r\n      return;\r\n    }\r\n\r\n    // get the current index of the cursor\r\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\r\n    const input = inputRef.current;\r\n\r\n    if (!input) return;\r\n\r\n    const caretPos = getCaretCoordinates(input, caret);\r\n\r\n    // search for the last occurence of the space character from\r\n    // the cursor\r\n    const indexOfLastSpace =\r\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\r\n        ? value.lastIndexOf(\"\\n\", caret - 1)\r\n        : value.lastIndexOf(\" \", caret - 1);\r\n\r\n    // first character of the currently being typed word is\r\n    // one character after the space character\r\n    // index of last character is one before the current position\r\n    // of the caret\r\n    setMatchStart(indexOfLastSpace + 1);\r\n    setMatchEnd(caret - 1);\r\n\r\n    // currentWord is the word that is being typed\r\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\r\n    if (currentWord && enabled) {\r\n      // make an api call to fetch suggestions\r\n      renderSuggestions(currentWord);\r\n\r\n      const rect = input.getBoundingClientRect();\r\n\r\n      // calculate new left and top of the suggestion list\r\n\r\n      // minimum of the caret position in the text input and the\r\n      // width of the text input\r\n      const left = Math.min(\r\n        caretPos.left,\r\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\r\n      );\r\n\r\n      // minimum of the caret position from the top of the input\r\n      // and the height of the input\r\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\r\n\r\n      setTop(top);\r\n      setLeft(left);\r\n    } else {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const helperVisible = options.length > 0;\r\n\r\n    if (helperVisible) {\r\n      if (triggerKeys.includes(event.key)) {\r\n        event.preventDefault();\r\n        handleSelection(selection);\r\n      } else {\r\n        switch (event.key) {\r\n          case KEY_ESCAPE:\r\n            event.preventDefault();\r\n            reset();\r\n            break;\r\n          case KEY_UP:\r\n            event.preventDefault();\r\n            setSelection((options.length + selection - 1) % options.length);\r\n            break;\r\n          case KEY_DOWN:\r\n            event.preventDefault();\r\n            setSelection((selection + 1) % options.length);\r\n            break;\r\n          default:\r\n            onKeyDown && onKeyDown(event);\r\n            break;\r\n        }\r\n      }\r\n    } else {\r\n      onKeyDown && onKeyDown(event);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (\r\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  ) => {\r\n    if (!isTouchEnabled()) {\r\n      if (insertCurrentSelectionOnBlur && options[selection]) {\r\n        handleSelection(selection);\r\n      } else {\r\n        reset();\r\n      }\r\n    }\r\n    onBlur && onBlur(event);\r\n  };\r\n\r\n  const handleResize = () => {\r\n    // TODO implement the resize function to resize\r\n    // the helper on screen size change\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    setWindowSize({ width, height });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    setWindowSize({ width, height });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      // position relative is required to show the component\r\n      // in the correct position\r\n      style={{\r\n        ...containerStyles,\r\n        position: \"relative\",\r\n      }}\r\n      className={containerClassName}\r\n    >\r\n      {renderComponent({\r\n        onChange: handleChange,\r\n        onKeyDown: handleKeyDown,\r\n        onBlur: handleBlur,\r\n        ref: inputRef,\r\n        value: value,\r\n        \"data-testid\": \"rt-input-component\",\r\n        ...rest,\r\n      })}\r\n      {shouldRenderSuggestions && options.length > 0 && (\r\n        <ul\r\n          style={{\r\n            left: `${left + offsetX}px`,\r\n            top: `${top + offsetY}px`,\r\n            position: \"absolute\",\r\n            width: \"auto\",\r\n          }}\r\n          className={classes.ReactTransliterate}\r\n          data-testid=\"rt-suggestions-list\"\r\n        >\r\n          {/*\r\n           * convert to set and back to prevent duplicate list items\r\n           * that might happen while using backspace\r\n           */}\r\n          {Array.from(new Set(options)).map((item, index) => (\r\n            <li\r\n              className={index === selection ? classes.Active : undefined}\r\n              style={index === selection ? activeItemStyles || {} : {}}\r\n              onMouseEnter={() => {\r\n                setSelection(index);\r\n              }}\r\n              onClick={() => handleSelection(index)}\r\n              key={item}\r\n            >\r\n              {item}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type { ReactTransliterateProps, Language };\r\nexport { TriggerKeys, getTransliterateSuggestions };\r\n"],"names":[],"version":3,"file":"types.d.ts.map","sourceRoot":"../"}